SimpsonтАЩs 3/8 Rule is another numerical integration method, best suited when the number of intervals 
ЁЭСЫ
n is a multiple of 3.

Formula:

тИл
ЁЭСО
ЁЭСП
ЁЭСУ
(
ЁЭСе
)
тАЙ
ЁЭСС
ЁЭСе
тЙИ
3
тДО
8
[
ЁЭСУ
(
ЁЭСО
)
+
3
ЁЭСУ
(
ЁЭСе
1
)
+
3
ЁЭСУ
(
ЁЭСе
2
)
+
2
ЁЭСУ
(
ЁЭСе
3
)
+
3
ЁЭСУ
(
ЁЭСе
4
)
+
тЛп
+
ЁЭСУ
(
ЁЭСП
)
]
тИл 
a
b
тАЛ
 f(x)dxтЙИ 
8
3h
тАЛ
 [f(a)+3f(x 
1
тАЛ
 )+3f(x 
2
тАЛ
 )+2f(x 
3
тАЛ
 )+3f(x 
4тАЛ
 )+тЛп+f(b)]
Where,
тДО
=
ЁЭСП
тИТ
ЁЭСО
ЁЭСЫ
h= 
n
bтИТa
тАЛ
def f(x):
    return x * x  # ржорзВрж▓ ржлрж╛ржВрж╢ржи f(x) = x^2

# ЁЯФ╖ Trapezoidal Rule
def trapezoidal(a, b, n):
    h = (b - a) / n  # h = ржкрзНрж░рждрж┐ржЯрж┐ ржнрж╛ржЧрзЗрж░ ржкрзНрж░рж╕рзНрже (step size)
    result = f(a) + f(b)  # f(a) ржУ f(b) ржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ

    for i in range(1, n):
        result += 2 * f(a + i * h)  # ржорж╛ржЭрзЗрж░ ржорж╛ржиржЧрзБрж▓рзЛ рзи ржЧрзБржг ржХрж░рзЗ ржпрзЛржЧ

    return (h / 2) * result  # ржЪрзВрзЬрж╛ржирзНржд ржорж╛ржи h/2 ржжрж┐рзЯрзЗ ржЧрзБржг

# ЁЯФ╖ Simpson's 1/3 Rule
def simpsons_one_third(a, b, n):
    if n % 2 != 0:
        print("Simpson's 1/3 Rule-ржПрж░ ржЬржирзНржп n ржЬрзЛрзЬ (even) рж╣рждрзЗ рж╣ржмрзЗред")
        return -1
    
    h = (b - a) / n  # h = step size
    result = f(a) + f(b)

    for i in range(1, n):
        x = a + i * h
        if i % 2 != 0:
            result += 4 * f(x)  # ржмрж┐ржЬрзЛрзЬ ржЗржиржбрзЗржХрзНрж╕ рж╣рж▓рзЗ рзк ржЧрзБржг ржХрж░рзЗ ржпрзЛржЧ
        else:
            result += 2 * f(x)  # ржЬрзЛрзЬ ржЗржиржбрзЗржХрзНрж╕ рж╣рж▓рзЗ рзи ржЧрзБржг ржХрж░рзЗ ржпрзЛржЧ

    return (h / 3) * result

# ЁЯФ╖ Simpson's 3/8 Rule
def simpsons_three_eighth(a, b, n):
    if n % 3 != 0:
        print("Simpson's 3/8 Rule-ржПрж░ ржЬржирзНржп n ржЕржмрж╢рзНржпржЗ рзй-ржПрж░ ржЧрзБржгрж┐рждржХ рж╣рждрзЗ рж╣ржмрзЗред")
        return -1
    
    h = (b - a) / n  # h = step size
    result = f(a) + f(b)

    for i in range(1, n):
        x = a + i * h
        if i % 3 == 0:
            result += 2 * f(x)  # рзй-ржПрж░ ржЧрзБржгрж┐рждржХ рж╣рж▓рзЗ рзи ржЧрзБржг ржХрж░рзЗ ржпрзЛржЧ
        else:
            result += 3 * f(x)  # ржЕржирзНржп рж╕ржм ржХрзНрж╖рзЗрждрзНрж░рзЗ рзй ржЧрзБржг ржХрж░рзЗ ржпрзЛржЧ

    return (3 * h / 8) * result


# ЁЯФ╖ Main Program
a = float(input("Enter lower limit a: "))  # a = рж╕ржорж╛ржХрж▓ржирзЗрж░ ржирж┐ржЪрзЗрж░ рж╕рзАржорж╛ (lower limit)
b = float(input("Enter upper limit b: "))  # b = рж╕ржорж╛ржХрж▓ржирзЗрж░ ржЙржкрж░ рж╕рзАржорж╛ (upper limit)
n = int(input("Enter number of intervals n: "))  # n = ржХржд ржнрж╛ржЧрзЗ ржмрж┐ржнржХрзНржд ржХрж░ржмрзЗ (number of subintervals)

# ЁЯФ╖ ржлрж▓рж╛ржлрж▓ ржжрзЗржЦрж╛ржирзЛ рж╣ржмрзЗ
print("\nResults:")

trap = trapezoidal(a, b, n)  # Trapezoidal Rule ржкрзНрж░рзЯрзЛржЧ
print(f"Trapezoidal Rule Result: {trap:.6f}")

sim13 = simpsons_one_third(a, b, n)  # Simpson's 1/3 Rule ржкрзНрж░рзЯрзЛржЧ
if sim13 != -1:
    print(f"Simpson's 1/3 Rule Result: {sim13:.6f}")

sim38 = simpsons_three_eighth(a, b, n)  # Simpson's 3/8 Rule ржкрзНрж░рзЯрзЛржЧ
if sim38 != -1:
    print(f"Simpson's 3/8 Rule Result: {sim38:.6f}")
